;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; encoding: utf-8 -*-
;; See the file LICENCE for licence information.
(in-package #:cl-l10n)

(defparameter *consonants* (iter (with result = (make-hash-table :test #'eq))
                                 (for char in '(#\b #\c #\d #\f #\g #\h #\j #\k #\l #\m #\n #\p #\q #\r #\s #\t #\v #\w #\x #\z #\y))
                                 (setf (gethash char result) t)
                                 (finally (return result))))

(defstruct (vowel-entry (:conc-name vowel-))
  (low-p nil :type boolean)
  (acute-p nil :type boolean)
  (double-acute-p nil :type boolean)
  (normal-variant #\x :type character)
  (acute-variant nil :type (or null character))
  (double-acute-variant nil :type (or null character)))

(defparameter *vowels* (let ((result (make-hash-table :test #'eq)))
                         ;; low vowels
                         (flet ((make-entry (entry)
                                  (make-vowel-entry :low-p (first entry)
                                                    :normal-variant (second entry)
                                                    :acute-variant (third entry)
                                                    :double-acute-variant (fourth entry))))
                           (iter (for entry in
                                      '((t #\a #\LATIN_SMALL_LETTER_A_WITH_ACUTE)
                                        (t #\o #\LATIN_SMALL_LETTER_O_WITH_ACUTE #\LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE)
                                        (t #\u #\LATIN_SMALL_LETTER_U_WITH_ACUTE #\LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE)
                                        (nil #\e #\LATIN_SMALL_LETTER_E_WITH_ACUTE)
                                        (nil #\i #\LATIN_SMALL_LETTER_I_WITH_ACUTE)
                                        ))
                                 (for char = (second entry))
                                 (setf (gethash char result) (make-entry entry))
                                 (awhen (third entry)
                                   (let ((acute-entry (make-entry entry)))
                                     (setf (vowel-acute-p acute-entry) t)
                                     (setf (gethash it result) acute-entry)))
                                 (awhen (fourth entry)
                                   (let ((double-acute-entry (make-entry entry)))
                                     (setf (vowel-double-acute-p double-acute-entry) t)
                                     (setf (gethash it result) double-acute-entry)))))
                         result))

(defun vowel-entry-for (char)
  (declare (type character char)
           (optimize (speed 3) (debug 0))
           (inline vowel-entry-for))
  (gethash (char-downcase char) *vowels*))

(defun consonantp (char)
  (declare (type character char)
           (optimize (speed 3) (debug 0))
           (inline consonantp))
  (gethash (char-downcase char) *consonants*))

(defun vowelp (char)
  (declare (type character char)
           (optimize (speed 3) (debug 0))
           (inline vowelp))
  (vowel-entry-for char))

(defun high-vowel-p (char)
  (declare (type character char)
           (optimize (speed 3) (debug 0))
           (inline vowelp))
  (aif (vowel-entry-for char)
       (not (vowel-low-p it))))

(defun low-vowel-p (char)
  (declare (type character char)
           (optimize (speed 3) (debug 0))
           (inline vowelp))
  (aif (vowel-entry-for char)
       (vowel-low-p it)))

(defun last-vowel-of (str)
  (declare (type (simple-array character) str)
           (optimize (speed 3) (debug 0)))
  (iter (for i from (1- (length str)) downto 0)
        (for char = (elt str i))
        (finding char :such-that (vowelp char))))

(macrolet ((define (variant)
               `(defun ,(intern-concat (list "VOWEL-" variant "-VARIANT-OF")) (char)
                 (declare (type character char)
                  (optimize (speed 3) (debug 0)))
                 (awhen (vowel-entry-for char)
                   (,(intern-concat (list "VOWEL-" variant "-VARIANT")) it)))))
  (define normal)
  (define acute)
  (define double-acute))

(defun starts-with-consonant-p (str)
  (declare (type (simple-array character) str)
           (optimize (speed 3) (debug 0))
           (inline starts-with-consonant-p))
  (unless (zerop (length str))
    (consonantp (elt str 0))))

(defun starts-with-vowel-p (str)
  (declare (type (simple-array character) str)
           (optimize (speed 3) (debug 0))
           (inline starts-with-vowel-p))
  (unless (zerop (length str))
    (vowelp (elt str 0))))

