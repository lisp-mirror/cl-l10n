\input texinfo          @c -*- mode: texinfo, coding: utf-8  -*-
@c %**start of header
@setfilename cl-l10n.texi
@settitle CL-L10N Manual


@dircategory Software development
@direntry
* cl-l10n: (cl-l10n).  CL Localization Package
@end direntry

@copying
Copyright @copyright{} 2004 Sean Ross All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

@enumerate
@item
Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

@item
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

@item
The names of the authors and contributors may not be used to endorse
or promote products derived from this software without specific prior
written permission.
@end enumerate

@sc{This software is provided by the authors and contributors ``as is''
and any express or implied warranties, including, but not limited to,
the implied warranties of merchantability and fitness for a particular
purpose are disclaimed.  In no event shall the authors or contributors
be liable for any direct, indirect, incidental, special, exemplary, or
consequential damages (including, but not limited to, procurement of
substitute goods or services; loss of use, data, or profits; or
business interruption) however caused and on any theory of liability,
whether in contract, strict liability, or tort (including negligence
or otherwise) arising in any way out of the use of this software, even
if advised of the possibility of such damage.}

@end copying

@c
@titlepage
@title CL-L10N: CL Localization Package

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex

@node Top
@top CL-L10N: CL Localization Package

@insertcopying

@menu
* Introduction:         Introduction
* Getting Started:      Getting Started
* API:                  API
* I18N:                 I18N
* Notes:                Notes
* Credits:              Credits
* Comprehensive Index::

@end menu

@end ifnottex

@node Introduction
@chapter Introduction

CL-L10N is a portable localization package for Common Lisp which is more or
less modelled on the Allegro Common Lisp locale package. It currently supports
various accessors (like locale-mon), number printing, money printing and
time/date printing.

The CL-L10N Home Page is at @uref{http://www.common-lisp.net/project/cl-l10n}
where one can find details about mailing lists, cvs repositories and various releases.

Enjoy
 Sean.

@section Supported Implementations
@itemize @bullet
@item SBCL
@item CMUCL
@item CLISP
@item Lispworks
@item ECL
@item Allegro CL
@end itemize


@node Getting Started
@chapter Getting Started

CL-L10N uses @uref{http://cliki.net/asdf,,asdf} as it's system definition tool and
is required whenever you load the package.
You will need to download it, or if you have @uref{http://sbcl.org,,sbcl}
@code{(require 'asdf)}


@section Downloading
@itemize
@item Quicklisp
CL-L10N is available through quicklisp. If you are new
to Common Lisp this is the suggested download method. With quicklisp loaded run
@code{(ql:quickload :cl-l10n)}
This will download and install the package for you.
See the documentation of quicklisp for more details.

@item DOWNLOAD

The latest cl-l10n release will always be available from @uref{http://www.common-lisp.net,,cl.net}.
Download and untar in an appropriate directory then symlink @file{cl-l10n.asd}  to a directory on
@code{asdf:*central-registry*} (see the documentation for asdf for details about setting up asdf).

@item CVS

If you feel the need to be on the bleeding edge you can use
anonymous CVS access, see the @uref{http://www.common-lisp.net/project/cl-l10n,,Home Page}
 for more details for accessing the archive. Once downloaded follow the symlink instructions above.

@end itemize

@section Installing
Once downloaded and symlinked you can load CL-L10N at anytime using
@code{(asdf:oos 'asdf:load-op :cl-l10n)}
This will compile CL-L10N the first time it is loaded.

Once installed run @code{(asdf:oos 'asdf:test-op :cl-l10n)} to test
the package. If any tests fail please send an email to one of the
mailing lists.

@node API
@chapter API

@section Variables
@anchor{Variable *locale*}
@vindex *locale*
@deftp {Variable} *locale*
The default locale which will be used.
Not exported.
@end deftp

@anchor{Variable *locale-cache*}
@vindex *locale-cache*
@deftp {Variable} *locale-cache*
A hash table containing all loaded localed keyed on locale name.
Not exported.
@end deftp

@anchor{Variable *cldr-root-directory*}
@vindex *cldr-root-directory*
@deftp {Variable} *cldr-root-directory*
Root directory for cldr files. Not exported.
By default this is a directory provided by the cl-l10n-cldr package.
@end deftp

@section Functions
@anchor{Function locale-name}
@deffn {Function} locale-name locale
Returns the name of @emph{locale}.
@end deffn

@anchor{Function locale}
@deffn {Function} locale locale-designator &key (use-cache t) otherwise
Loads the locale designated by the locale-designator @emph{name} which is
expected to be found in @code{*locale-path*}. If use-cache is @code{nil} the
locale will be forcibly reloaded from path otherwise the cached locale will be returned.
If the locale cannot be found and errorp is not nil an error of type @code{locale-error}
will be signalled.

Find locale named by the specification @emph{locale-designator}. If @emph{use-cache}
is non-nil forcefully reload/reparse the cldr locale else
the locale is first looked for in @emph{*locale-cache*}. If @emph{otherwise} is not supplied
signal an error that the locale file cannot be found.
If @emph{otherwise} is a list starting with @code{:error} or @code{:warn}, an error or warning is
thrown, repsecitively with the remaineder of the list as arguments.
If @emph{otherwise} is a function, that function is called and the result is returned.
Otherwise the value of @emph{otherwise} is returned.
@end deffn

@anchor{Function load-all-locales}
@deffn {Function} load-all-locales &key (ignore-errors nil) (use-cache t)
Load all locales.
@end deffn

@anchor{Macro defresources}
@deffn {Macro}  defresources locale-designator &body resources
Define resources for a locale.
@emph{locale-designator} is a symbol or string identifying the locale, ex: @code{:en_US}.
A resource can be a simple value, or a function.

For a simple value, the resource is a two-element list, where the first element is the resource key,
as a string or unquoted symbol, and the second element is the value.

For a function, the resource is a list where the first element is the resource key (an unquoted symbol),
the second element is the lambda list for the function, and the rest of the list is the body of the function.

The resource is available with lookup-resource. If the resource is a value, it can be accessed with localize,
or the @code{#\"} macro. If the resource is a function, then a function is defined with the resources name that dispatches
on the current locale
@end deffn

@anchor{Function localize}
@deffn {Function} localize object
Generic function to localize an object. The default simply calls lookup-resource.
@end deffn

@anchor{Function lookup-resource}
@deffn {Function} lookup-resource name &key arguments otherwise
Look up resource by the given name. If the resource is a function, then arguments are passed to that
function. The otherwise parameter determines the behaviour if the resource is not found in the following way:
If @emph{otherwise} is not provided, it throws a resource missing warning.
If @emph{otherwise} is a list starting with :error or :warn, an error or warning is given with the specified parameters respecively.
If @emph{otherwise} is a function, that function is called.
Otherwise the value of otherwise is returned.

If arguments are provided and the resource is a string, format is called on the string with the arguments passed.
@end deffn

@anchor{Macro lookup-first-matching-resource}
@deffn {Macro} lookup-first-matching-resource &body specs
Try to look up the resource keys in specs, returning the first match. If the spec is a list, the elements
are concatenated with ``.'' to create the final key.

You can control whether or not a key is tried with a @code{when} or @code{until} form. In which case, the
key is only tried if the condition is met.
@end deffn

@anchor{Macro lookup-first-matching-resource*}
@deffn {Macro} lookup-first-matching-resource (&key default) &body specs
Like @code{lookup-first-matching-resource} but with an optional default if nothing matches.
@end deffn

@anchor{Function format-number/decimal}
@deffn {Function} format-number/decimal stream number &key (verbosity 'medium) pattern
Format a decimal number.
@end deffn

@anchor{Function %format-number.decimal}
@deffn {Function} %format-number.decimal stream number colon-modifier? at-modifier?
Analog to format-number/decimal for use as a format derective.
@end deffn


@anchor{Function format-number/currency}
@deffn {Function} format-money stream number currency-code &key verbosity pattern
Formats a number as a currency value. currency-code should be a currency symbol from cl-l10n.ldml.
@end deffn

@anchor{Function format-number/percent}
@deffn {Function} format-number/percent number &key verbosity pattern
Format a number as a percentage.
@end deffn

@anchor{Function %format-number.percent}
@deffn {Function} %format-number.percent stream number colon-modifier? at-modifier?
Analog to format-number/percent for use as a format derective.
@end deffn

@anchor{Function format-date}
@deffn {Function} format-date stream date &key verbosity pattern calendar
Format localized date from local-time timestamp
@end deffn

@anchor{Function %format-date}
@deffn {Function} %format-date stream number colon-modifier? at-modifier?
Analog to format-date for use as a format derective.
@end deffn

@anchor{Function format-time}
@deffn {Function} format-time stream time &key verbosity pattern calendar
Format localized time from local-time timestamp
@end deffn

@anchor{Function %format-time}
@deffn {Function} %format-time stream number colon-modifier? at-modifier?
Analog to format-time for use as a format derective.
@end deffn

@anchor{Function format-timestamp}
@deffn {Function} format-timestamp stream timestamp &key verbosity pattern calendar
Format localized date and time for a local-time timestamp
@end deffn

@anchor{Function %format-timestamp}
@deffn {Function} %format-timestamp stream number colon-modifier? at-modifier?
Analog to format-timestamp for use as a format derective.
@end deffn

@anchor{Function format}
@deffn {Function} format stream fmt-string &rest args
Format is an unexported symbol in the cl-l10n package. It's
use is to make formatting of dates, times, numbers and monetary
values simpler.
Shadow importing @code{cl-l10::format} into your package gives
you a few new format directives.
The new directives are:
~N : Numbers,
~Y : Percentage,
~L : Date,
~M : Time,
~U : Timea nd Date.
All other format directives
are unchanged and work as normal. These new directives are
drop in replacements for the ~/cl-l10n:%format-?/ calls.

@verbatim
;; These examples assume an en_ZA locale and a CL -7 Time Zone
(in-package :cl-user)

(cl-l10n:shadow-format)
(defvar *date* (local-time:universal-to-timestamp 3192624000))

(format t "~N" 3192624000)
  prints `3,192,624,000'

(format t "~Y" 0.456)
  prints `46%'

(format t "~L" *date*)
  prints `03 Mar 2001'

(format t "~M" *date*)
  prints `9:00:00 am'

(format t "~U" *date*)
  prints `03 Mar 2001 9:00:00 am'

@end verbatim

@end deffn

@anchor{Macro formatter}
@deffn {Macro} formatter fmt-string
Formatter is another unexported symbol in the cl-l10n package
Shadow importing formatter gives support for the new format
control directives.
@end deffn

@anchor{Macro with-locale}
@deffn {Macro} with-locale locale &body body
Execute @emph{body} in the locale specified by @emph{locale}.
@emph{locale} may either be a single locale designator, or a list of locale designators.
In the later case, resources will be looked for in each locale in the given order until a
match is found.
@end deffn

@anchor{Function current-locale}
@deffn {Function} current-locale
Get the current locale. This is a list of @code{locale} objects.
This is also @code{setf}-able to either a single locale designator or a list of locale designators.
@end deffn

@subsection Convenience functions

@anchor{Function shadow-format}
@deffn {Function} shadow-format &optional (package *package*)
Shadowing import @code{cl-l10n::format} and @code{cl-l10n::formatter} into @emph{package}.
@end deffn

@anchor{Macro enable-sharpquote-reader}
@deffn {Macro} enable-sharpquote-reader
Enable quote reader macro dispatching on ``#"''. Example: @code{#"i18n.text"} will be shorthand for
@code{(localize "i18n.text")}. Not that this modifies @code{*readtable*}.
@end deffn

@section Classes
@anchor{Class locale}
@deftp {Class} locale
Class Precedence: @code{standard-object}
The class representing a loaded locale.
@end deftp

@section Conditions
@anchor{Condition locale-error}
@deftp {Condition} locale-error
Class Precedence: @code{error}

Root CL-L10N condition which will be signalled when an exceptional
situation occurs.
@end deftp

@node I18N
@chapter I18N

@section Internationalisation
CL-L10N supports internationalised strings and other resources.

To define resources either use the @code{defresources} macro, or
use @code{setf} on a @code{lookup-resource} form.

@verbatim
(defresources :de_DE
  ("showtime" "Danke, die Zeit ist ~M~%")
  ("product.name" "Product")
  (name "Ich heiße ~a")
  (greetings (name &optional (formal t))
    (format nil "Hallo ~a, ~a?" name (if formal
                                         "wie geht es Ihnen"
                                         "wie geht's"))))

(defresources :en
  ("showtime" "Thanks, the time is ~M~%")
  ("product.name" "Product")
  (name "My name is ~a")
  (greetings (name &optional formal)
  	(declare (ignore formal))
    (format nil "Hello ~a, how are you?" name)))

@end verbatim

The most generic way to look up a resource is with @code{lookup-resource}

@verbatim
(shadow-format)

(format t (lookup-resource "showtime") (local-time:now))
 prints `Thanks, the time is 10:47:16 pm'

(lookup-resource 'greetings :arguments '("Bob" nil))
 => "Hello Bob, how are you?"

(with-locale :de_DE
  (lookup-resource 'name :arguments "Johann"))
 => "Ich heiße Johann"

(with-locale :de_DE
  (lookup-resource 'greetings :arguments '("Johann"))
 => "Hallo Johann, wie geht es Ihnen?"

@end verbatim

As you can see, lookup resource can look up a resource by a string or symbol,
although function resources must always be defined and accessed with a symbol.

@code{lookup-resource} also takes an optional list of arguments wich are
passed to the function for function resources, and used as format parameters
if the resource is a string. Note that the additional format directives
cannot be used in the latter case.

In addition to @code{lookup-resource}, there are two other ways to access
resources. The first is the localize function, which takes the name of the
resource and looks it up without any arguments. This only works for string
resources or functions with no arguments. For function resources, cl-l10n
defines a function which dispatches on the current locale and calls the
appropriate function defined in defresources. Here are some examples:
@verbatim
(localize "product.name")
 => "Product"

(greetings "John" nil)
 => "Hello John, how are you?

(with-locale :de_DE
  (greetings "Johann" nil))
 => "Hallo Johann, wie geht's"

@end verbatim

Finally, you can use @code{enable-sharpquote-reader} to enable a reader
macro that calls @code{localize} on the ``#"'' pattern. Ex: @code{#"foo"}
becomes @code{(localize "foo")}.

@node Notes
@chapter Notes

@section Locale Designators
The locale argument to the various locale accessors and to the print functions
is a locale designator. A locale designator is one of three things
@itemize @bullet
@item A locale object returned by @code{(locale name)}
@item A string designating a locale, ``en_ZA''.
@item A symbol eg. :en_ZA
@end itemize

@section The Default Locale
The default locale is found by looking at various environment variables.
If the CL_LOCALE environment variable is set then this locale is loaded.
Failing that the locale designated by the environment variable LC_CTYPE
is loaded. If these two have failed then the POSIX locale is loaded
as the default.

@section Time and Number Formats
The time and number formats use the same directive characters as
@uref{http://unicode.org/reports/tr35/, LDML}.


@section Known Issues
@itemize @bullet
@item The z time format directive is not supported
@end itemize


@node Credits
@chapter Credits
Thanks To
@itemize @bullet
@item Common-Lisp.net: For project hosting.
@end itemize

@node Comprehensive Index
@chapter Index

@section Function Index
@printindex fn

@section Variable Index
@printindex vr

@bye
